I"<p>Ever wondered, how you can stretch the background of the container beyond the viewport but the content should not exceed the defined width? Well, if you are looking closely, then the answer is all over the place on this website. As I have used this technique, to design the <code class="highlighter-rouge">blockquotes</code>, <code class="highlighter-rouge">pre</code>, and <code class="highlighter-rouge">code</code> blocks on my website.</p>

<h4 id="technique">Technique</h4>

<p>The idea stems from the <a href="http://css-tricks.com/the-css-box-model/">box model technique</a>, in which you can apply negative margins on block child container for them to stretch outside the parent container. We use this idea of negative margins to stretch the background of the container to the entire width of the webpage. For example, <code class="highlighter-rouge">margin-left: -999em</code> will stretch the left margin of the box to far left, which in this case is outside the viewport (<code class="highlighter-rouge">-999em</code> is the magic number).</p>

<p>!(https://res.cloudinary.com/dw9fem4ki/image/upload/v1404648677/https_dl_kraken_io_7e3eb546529ff3421622655117b4bd51_negative-positive_s1vuna.png)[]</p>

<h4 id="problem">Problem</h4>

<p>This however, causes one problem, which also pulls the content (or the text) outside of the parent container, which destroys the alignment and flow of the content. This can be solved by using the exact same number to push the content right where it belongs with <code class="highlighter-rouge">padding-left: 999em</code>. This ensures that the background covers the entire left portion of the web page, but the content still respects the width.</p>

<h4 id="variations">Variations</h4>

<p>Interestingly, this technique not only works for fixed-width containers but also fluid width containers and also not only works horizontally (for widths) but also vertically (for heights).</p>

<ol>
  <li>Fixed/Fluid width container,</li>
</ol>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">a</span><span class="o">.</span> <span class="nt">Left</span> <span class="nt">aligned</span>  
<span class="nt">margin-left</span><span class="o">:</span> <span class="nt">-999em</span><span class="o">;</span> <span class="nt">padding-left</span><span class="o">:</span> <span class="nt">999em</span><span class="o">;</span>
<span class="nt">b</span><span class="o">.</span> <span class="nt">Right</span> <span class="nt">aligned</span>  
<span class="nt">margin-right</span><span class="o">:</span> <span class="nt">-999em</span><span class="o">;</span> <span class="nt">padding-right</span><span class="o">:</span> <span class="nt">999em</span><span class="o">;</span>
<span class="nt">c</span><span class="o">.</span> <span class="nt">Center</span> <span class="nt">aligned</span>  
<span class="nt">margin</span><span class="o">:</span> <span class="nt">0</span> <span class="nt">-999em</span><span class="o">;</span> <span class="nt">padding</span><span class="o">:</span> <span class="nt">0</span> <span class="nt">999em</span><span class="o">;</span></code></pre></figure>

<ol>
  <li>Fixed/Fluid height container,</li>
</ol>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">a</span><span class="o">.</span> <span class="nt">Top</span> <span class="nt">aligned</span>  
<span class="nt">margin-top</span><span class="o">:</span> <span class="nt">-999em</span><span class="o">;</span> <span class="nt">padding-top</span><span class="o">:</span> <span class="nt">999em</span><span class="o">;</span>
<span class="nt">b</span><span class="o">.</span> <span class="nt">Bottom</span> <span class="nt">aligned</span>  
<span class="nt">margin-bottom</span><span class="o">:</span> <span class="nt">-999em</span><span class="o">;</span> <span class="nt">padding-bottom</span><span class="o">:</span> <span class="nt">999em</span><span class="o">;</span>
<span class="nt">c</span><span class="o">.</span> <span class="nt">Middle</span> <span class="nt">aligned</span>  
<span class="nt">margin</span><span class="o">:</span> <span class="nt">-999em</span> <span class="nt">0</span><span class="o">;</span> <span class="nt">padding</span><span class="o">:</span> <span class="nt">999em</span> <span class="nt">0</span><span class="o">;</span></code></pre></figure>

<h4 id="mixins">Mixins</h4>

<p>Without a doubt, the next thing I hopped into are handy Sass-mixins to leverage this technique for your projects.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@mixin</span> <span class="n">align</span><span class="p">(</span><span class="err">$</span><span class="n">num</span><span class="p">:</span> <span class="m">999em</span><span class="p">,</span> <span class="err">$</span><span class="n">dir</span><span class="p">:</span> <span class="s2">'left'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">@if</span> <span class="err">$</span><span class="n">dir</span> <span class="err">==</span> <span class="s2">'center'</span> <span class="p">{</span>
        <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="n">-</span><span class="err">#{$</span><span class="n">num</span><span class="p">}</span><span class="o">;</span>
        <span class="nt">padding</span><span class="o">:</span> <span class="nt">0</span> <span class="err">#</span><span class="p">{</span><span class="err">$num</span><span class="p">}</span><span class="o">;</span>
    <span class="p">}</span>
    <span class="k">@else</span> <span class="n">if</span> <span class="err">$</span><span class="n">dir</span> <span class="err">==</span> <span class="s2">'middle'</span> <span class="p">{</span>
        <span class="nl">margin</span><span class="p">:</span> <span class="n">-</span><span class="err">#{$</span><span class="n">num</span><span class="p">}</span> <span class="nt">0</span><span class="o">;</span>
        <span class="nt">padding</span><span class="o">:</span> <span class="err">#</span><span class="p">{</span><span class="err">$num</span><span class="p">}</span> <span class="nt">0</span><span class="o">;</span>
    <span class="err">}</span>
    <span class="k">@else</span> <span class="p">{</span>
        <span class="nt">margin-</span><span class="err">#</span><span class="p">{</span><span class="err">$dir</span><span class="p">}</span><span class="o">:</span> <span class="nt">-</span><span class="err">#</span><span class="p">{</span><span class="err">$num</span><span class="p">}</span><span class="o">;</span>
        <span class="nt">padding-</span><span class="err">#</span><span class="p">{</span><span class="err">$dir</span><span class="p">}</span><span class="o">:</span> <span class="err">#</span><span class="p">{</span><span class="err">$num</span><span class="p">}</span><span class="o">;</span>
    <span class="p">}</span>
<span class="err">}</span></code></pre></figure>

<p>.. and the usage of this mixin, for each type of variation,</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.left-align</span> <span class="p">{</span>
    <span class="err">@include</span> <span class="err">align($</span><span class="py">dir</span><span class="p">:</span> <span class="s2">'left'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

:ET