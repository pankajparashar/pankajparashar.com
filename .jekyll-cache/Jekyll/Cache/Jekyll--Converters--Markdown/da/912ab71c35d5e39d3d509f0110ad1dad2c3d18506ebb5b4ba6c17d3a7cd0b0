I"º<p>Thanks to <a href="http://eli.thegreenplace.net/">Eli Bendersky</a> for bringing this to my attention by <a href="http://eli.thegreenplace.net/2015/the-scope-of-index-variables-in-pythons-for-loops/">writing about</a> it on his blog. Letâ€™s
take a few scenarios and youâ€™re job is to guess the output,</p>

<h4 id="scenario-1">Scenario 1</h4>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[]:</span>
<span class="o">...</span>    <span class="k">pass</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>       <span class="c1"># Output?</span></code></pre></figure>

<p>Since, there is no element in the list, the <code class="highlighter-rouge">for</code> loop simply doesnâ€™t run leaving <code class="highlighter-rouge">i</code> as an undefined variable in the current
scope. Hence, youâ€™ll get,</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">'i'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span></code></pre></figure>

<h4 id="scenario-2">Scenario 2</h4>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]:</span>
<span class="o">...</span>    <span class="k">pass</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>       <span class="c1"># Output?</span></code></pre></figure>

<p>You might think this would produce the same error as above. This is where things become different. In Python, the scoping rules
are fairly simple and elegant: a block is either a module, a function body or a class body. Within a function body, names are
visible from the point of their definition to the end of the block (including nested blocks such as nested functions). Hence, youâ€™ll get,</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="mi">3</span></code></pre></figure>

<p>This behavior has been <a href="https://docs.python.org/dev/reference/compound_stmts.html#for">well documented</a> in the official specification,</p>

<blockquote>
  <p>The for-loop makes assignments to the variables(s) in the target list. [â€¦] Names in the target list are not deleted when
the loop is finished, but if the sequence is empty, they will not have been assigned to at all by the loop.</p>
</blockquote>
:ET