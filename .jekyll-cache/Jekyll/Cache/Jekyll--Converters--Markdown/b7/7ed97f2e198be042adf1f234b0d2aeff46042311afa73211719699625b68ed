I"OH<p>In Python, the module that deals with regular expressions is called <a href="https://docs.python.org/2/library/re.html">re</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span></code></pre></figure>

<h4 id="basic-patterns">Basic patterns</h4>

<p>The power of regular expressions is that they can specify patterns, not just fixed characters. Here are the most basic patterns used for pattern matching,</p>

<p><code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">X</code>, <code class="highlighter-rouge">9</code> - Ordinary characters that match themselves<br />
<code class="highlighter-rouge">.</code> - Matches any single character except newline character<br />
<code class="highlighter-rouge">\w</code> - Matches any single letter, digit or underscore<br />
<code class="highlighter-rouge">\W</code> - Matches any character not part of <code class="highlighter-rouge">\w</code><br />
<code class="highlighter-rouge">\s</code> - Matches a single whitespace character like: space, newline, tab, return<br />
<code class="highlighter-rouge">\S</code> - Matches any character not part of <code class="highlighter-rouge">\s</code><br />
<code class="highlighter-rouge">\t</code>, <code class="highlighter-rouge">\n</code>, <code class="highlighter-rouge">\r</code> - Matches tab, newline, return respectively<br />
<code class="highlighter-rouge">\d</code> - Matches decimal digit 0-9<br />
<code class="highlighter-rouge">^</code> - Start of the string (and start of the line in-case of multiline string)<br />
<code class="highlighter-rouge">$</code> - End of the string (and newline character in-case of multiline string)<br />
<code class="highlighter-rouge">\</code> - Inhibit the specialness of a character<br />
<code class="highlighter-rouge">[abc]</code> - Matches <code class="highlighter-rouge">a</code> or <code class="highlighter-rouge">b</code> or <code class="highlighter-rouge">c</code><br />
<code class="highlighter-rouge">[a-zA-Z0-9]</code> - Matches any letter from (<code class="highlighter-rouge">a</code> to <code class="highlighter-rouge">z</code>) or (<code class="highlighter-rouge">A</code> to <code class="highlighter-rouge">Z</code>) or (<code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">9</code>)<br />
<code class="highlighter-rouge">\A</code> - Matches only at the start of the string even in MULTILINE mode<br />
<code class="highlighter-rouge">\Z</code> - Matches only at the end of the string even in MULTILINE mode<br />
<code class="highlighter-rouge">\b</code> - Matches only the beginning or end of the word</p>

<blockquote>
  <p>The <code class="highlighter-rouge">r</code> at the start of the pattern string designates a python raw string which passes through backslashes without change which is very handy for regular expressions (Java needs this feature badly!). I recommend that you always write pattern strings with the <code class="highlighter-rouge">r</code> just as a habit.</p>
</blockquote>

<p><strong>Examples</strong></p>

<p>Match ordinary characters like <code class="highlighter-rouge">iii</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'iii'</span><span class="p">,</span> <span class="s">'piiig'</span><span class="p">)</span>
<span class="s">'iii'</span></code></pre></figure>

<p>Match a single character using <code class="highlighter-rouge">.</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i.i'</span><span class="p">,</span> <span class="s">'pirig'</span><span class="p">)</span>
<span class="s">'iri'</span></code></pre></figure>

<p>Match any single letter, digit or underscore using <code class="highlighter-rouge">\w</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\wi'</span><span class="p">,</span> <span class="s">'piaig'</span><span class="p">)</span>
<span class="s">'iai'</span></code></pre></figure>

<p>Match any non-word character using <code class="highlighter-rouge">\W</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\Wi'</span><span class="p">,</span> <span class="s">'pi@ig'</span><span class="p">)</span>
<span class="s">'i@i'</span></code></pre></figure>

<p>Match a single whitespace character using <code class="highlighter-rouge">\s</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\si'</span><span class="p">,</span> <span class="s">'pi ig'</span><span class="p">)</span>
<span class="s">'i i'</span></code></pre></figure>

<p>Match any non-whitespace character using <code class="highlighter-rouge">\S</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\Si'</span><span class="p">,</span> <span class="s">'piAig'</span><span class="p">)</span>
<span class="s">'iAi'</span></code></pre></figure>

<p>Match tab character using <code class="highlighter-rouge">\t</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\ti'</span><span class="p">,</span> <span class="s">'pi   ig'</span><span class="p">)</span>
<span class="s">'i</span><span class="se">\t</span><span class="s">i'</span></code></pre></figure>

<p>Match decimal digit using <code class="highlighter-rouge">\d</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'i\di'</span><span class="p">,</span> <span class="s">'pi9ig'</span><span class="p">)</span>
<span class="s">'i9i'</span></code></pre></figure>

<p>Match start of the string</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'^pii'</span><span class="p">,</span> <span class="s">'piigpii'</span><span class="p">)</span>
<span class="s">'pii'</span></code></pre></figure>

<p>Match end of the string</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'pii$'</span><span class="p">,</span> <span class="s">'piigpii'</span><span class="p">)</span>
<span class="s">'pii'</span></code></pre></figure>

<p>Match literal character <code class="highlighter-rouge">\n</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'\.iig'</span><span class="p">,</span> <span class="s">'pii.iig'</span><span class="p">)</span>
<span class="s">'.iig'</span></code></pre></figure>

<p>Match any character in <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code> or <code class="highlighter-rouge">c</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'p[abc]g'</span><span class="p">,</span> <span class="s">'pbg'</span><span class="p">)</span>
<span class="s">'pbg'</span></code></pre></figure>

<p>Match any decimal digit between 0-9</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'p[0-9]g'</span><span class="p">,</span> <span class="s">'p7g'</span><span class="p">)</span>
<span class="s">'p7g'</span></code></pre></figure>

<blockquote>
  <p>Inside the square bracket <code class="highlighter-rouge">[]</code>, dot <code class="highlighter-rouge">.</code> means literal dot. Hence, no need to escape them. To use a dash <code class="highlighter-rouge">-</code> inside a square bracket
without indicating a range, put it at the end of the possible values like, <code class="highlighter-rouge">[a-zA-Z-]</code>. An up-hat <code class="highlighter-rouge">(^)</code> at the start of a square-bracket set inverts it, so <code class="highlighter-rouge">[^ab]</code> means any char except ‘a’ or ‘b’.</p>
</blockquote>

<h4 id="repetitions">Repetitions</h4>

<p>It becomes quite tediuos to represent a repeating pattern. Fortunately, regex handles this gracefully with the following
expressions,</p>

<p><code class="highlighter-rouge">+</code> - one or more characters<br />
<code class="highlighter-rouge">*</code> - zero or more characters<br />
<code class="highlighter-rouge">?</code> - zero or one character<br />
<code class="highlighter-rouge">{n}</code> - repeat exactly n times<br />
<code class="highlighter-rouge">{n,}</code> - repeat atleast n times or more<br />
<code class="highlighter-rouge">{m, n}</code> - repease atleast m times but no more than n times</p>

<p><strong>Examples</strong><br />
Match one or more characters using <code class="highlighter-rouge">+</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'pi+g'</span><span class="p">,</span> <span class="s">'piiiig'</span><span class="p">)</span>
<span class="s">'piiiig'</span></code></pre></figure>

<p>Match zero or more characters using <code class="highlighter-rouge">*</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'pi*g'</span><span class="p">,</span> <span class="s">'pg'</span><span class="p">)</span>
<span class="s">'pg'</span></code></pre></figure>

<p>Matche zero or one character using <code class="highlighter-rouge">?</code></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'pi?g'</span><span class="p">,</span> <span class="s">'piiiigpigpg'</span><span class="p">)</span>
<span class="s">'pig'</span></code></pre></figure>

<blockquote>
  <p>There is an extension to regular expression where you add a <code class="highlighter-rouge">?</code> at the end, such as <code class="highlighter-rouge">.*?</code> or <code class="highlighter-rouge">.+?</code>, changing them to be non-greedy. Now they stop as soon as they can. So to match a pattern like <code class="highlighter-rouge">&lt;b&gt;bold&gt;&lt;/b&gt;&lt;i&gt;italic&lt;/i&gt;</code> we could use the regex <code class="highlighter-rouge">&lt;.*?&gt;</code> to get this <code class="highlighter-rouge">['&lt;b&gt;', '&lt;/b&gt;', '&lt;i&gt;', '&lt;/i&gt;']</code></p>
</blockquote>

<h4 id="search-and-findall-and-compile">.search() and .findall() and .compile()</h4>

<p><code class="highlighter-rouge">findall()</code> matches all occurrences of a pattern in a string, but <code class="highlighter-rouge">search()</code> finds only the first occurrence of the pattern within the string while traversing from left-to-right.</p>

<p>For example, lets find out all the occurences of email address from the given string,</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">string</span> <span class="o">=</span> <span class="s">'purple alice@google.com, blah monkey bob@abc.com blah dishwasher'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r'[\w.-]+@[\w]+\.[\w]+'</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
<span class="p">[</span><span class="s">'alice@google.com'</span><span class="p">,</span> <span class="s">'bob@abc.com'</span><span class="p">]</span></code></pre></figure>

<p>!(https://res.cloudinary.com/dw9fem4ki/image/upload/v1408788930/regxper_dazjby.png)[]</p>

<p><code class="highlighter-rouge">compile()</code> compiles the regular expression into a regular expression object that can be used later with <code class="highlighter-rouge">.search()</code>, <code class="highlighter-rouge">.findall()</code> or <code class="highlighter-rouge">.match()</code>. If you are using the same regex repeatedly, then it is much efficient to compile the regex first and then apply it on strings.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">pat</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'^foo'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pat</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">'foobar'</span><span class="p">)</span>
<span class="p">[</span><span class="s">'foo'</span><span class="p">]</span></code></pre></figure>

<h4 id="optional-flags">Optional flags</h4>

<p>These are functions that take options to modify the behavior of the pattern match. The option flag is added as an extra argument to the <code class="highlighter-rouge">search()</code> or <code class="highlighter-rouge">findall()</code> etc., e.g. <code class="highlighter-rouge">re.search(pat, str, re.IGNORECASE)</code>. Flags are available in the re module under two names, a long name such as <code class="highlighter-rouge">IGNORECASE</code> and a short, one-letter form such as <code class="highlighter-rouge">I</code>. Multiple flags can be specified by bitwise OR-ing them; <code class="highlighter-rouge">re.I | re.M</code> sets both the I and M flags.</p>

<p><code class="highlighter-rouge">re.IGNORECASE</code> - Case insensitive pattern matchin, so <code class="highlighter-rouge">a</code> matches both <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">A</code><br />
<code class="highlighter-rouge">re.DOTALL</code> - Allows dot (<code class="highlighter-rouge">.</code>) to match newline<br />
<code class="highlighter-rouge">re.MULTILINE</code> - Within a string made of many lines, allow ^ and $ to match the start and end of each line</p>

<p><strong>Example</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">pat</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'^foo.'</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span> <span class="o">|</span> <span class="n">re</span><span class="o">.</span><span class="n">DOTALL</span> <span class="o">|</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pat</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">'Foo</span><span class="se">\n</span><span class="s">fOO</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="p">[</span><span class="s">'Foo</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">'fOO</span><span class="se">\n</span><span class="s">'</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>This article was later transformed into a full length video that can be found here on <a href="https://www.youtube.com/watch?v=K28U0HvkIG8">Youtube</a>, thanks
to the awesome folks at <a href="https://www.webucator.com/">Webucator</a>. Needless to mention that they also offer customized
Python courses for both public and individual students on their <a href="https://www.webucator.com/programming/python.cfm">website</a>.</p>
</blockquote>
:ET