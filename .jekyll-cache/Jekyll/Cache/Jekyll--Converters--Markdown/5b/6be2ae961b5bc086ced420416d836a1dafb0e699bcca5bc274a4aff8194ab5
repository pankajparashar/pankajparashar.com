I"µ<p>Sample markup and styles to start with,</p>

<p>` highlight html</p>
<p class="red">Hi, this is a plain-old, sad-looking paragraph tag.</p>
<p>` endhighlight</p>

<p><code class="highlighter-rouge"> highlight css 
.red::before {
    content: 'red';
    color: red;
}
</code> endhighlight</p>

<blockquote>
  <p>Objective -<br />
To modify the color of the pseudo element - <code class="highlighter-rouge">.red::before</code> from <code class="highlighter-rouge">red</code> to <code class="highlighter-rouge">green</code>.</p>
</blockquote>

<p><strong>Method 1</strong><br />
Write separate classes attached with psuedo element for each style and then using JavaScript or jQuery toggle between these classes.</p>

<p><code class="highlighter-rouge"> highlight css 
.green::before {
    content: 'green';
    color: green;
}
</code> endhighlight</p>

<p><code class="highlighter-rouge"> highlight js 
$('p').removeClass('red').addClass('green');
</code> endhighlight</p>

<p><strong>Method 2</strong><br />
Inject new styles to the existing document stylesheet directly either via JavaScript and the webpage will automatically reflect the new css.</p>

<p><code class="highlighter-rouge"> highlight js 
document.styleSheets[0].addRule('.red::before','color: green');
document.styleSheets[0].insertRule('.red::before { color: green }', 0);
</code> endhighlight</p>

<p><strong>Method 3</strong><br />
Create a new stylesheet and inject the modified rules to the newly created document stylesheet either via JavaScript or jQuery.</p>

<p>` highlight js 
// Create a new style tag
var style = document.createElement(‚Äústyle‚Äù);</p>

<p>// Append the style tag to head
document.head.appendChild(style);</p>

<p>// Grab the stylesheet object
sheet = style.sheet</p>

<p>// Use addRule or insertRule to inject styles
sheet.addRule(‚Äò.red::before‚Äô,‚Äôcolor: green‚Äô);
sheet.insertRule(‚Äò.red::before { color: green }‚Äô, 0);
` endhighlight</p>

<p>or jQuery ‚Ä¶</p>

<p><code class="highlighter-rouge"> highlight js 
$('&lt;style&gt;.red::before{color:green}&lt;/style&gt;').appendTo('head');
</code> endhighlight</p>

<p><strong>Method 4</strong><br />
At times you need the fetch the value of the property from the existing ruleset and then make the modifications based on some logic.</p>

<p><code class="highlighter-rouge"> highlight js 
var str = window.getComputedStyle($('.red'), '::before').getPropertyValue('content');
document.styleSheets[0].addRule('.red::before','content: "' + str + str + '"');
document.styleSheets[0].insertRule('.red::before { content: "' + str + str + '" }', 0);
</code> endhighlight</p>

<p><strong>Method 5</strong><br />
We can alter a different DOM attribute of the element by combining it with the content property, we can change the content (but not other properties, like margin or color) of pseudo elements dynamically.</p>

<p>` highlight html</p>
<p class="red" data-attr="red">Hi, this is plain-old, sad-looking paragraph tag.</p>
<p>` endhighlight</p>

<p><code class="highlighter-rouge"> highlight css 
.red::before {
    content: attr(data-attr);
    color: red;
}
</code> endhighlight</p>

<p><code class="highlighter-rouge"> highlight js 
$('.red').attr('data-attr', 'green');
</code> endhighlight</p>
:ET